
module Test where


import Test2 as XX
import Test3

data B = BBB
data A a = BB a| CCC a| NN (a -> Int)
--data A = DD
aaa :: a -> a -> A (A a)
aaa aa bb = let a = CCC bb
                b = BB a
             in b
bbb = (div (1 * 2) 4) + 3 - 0
fff = BBB
--fff = BBB
eee = 3:[1, 2]
yyy = (2, 1)
ggg (BB aaa) = if False then aaa else aaa
hhh x b = case 1 of
            yyy -> 2
nnn :: Int -> Int
nnn a = a
mmm = nnn 2
ttt = let f = \a->a
       in (f 1) + (f 2)
--ooo :: Int -> C
ooo = BBB
pppp = XX.BBB

f a = a

main :: Signal Int
main = liftS3 (\(NN s1) s2 s3 -> (s1 0) + 0 + s3) <| pp <| oo <| oo

oo = foldS (\a i -> a) 0 clk

pp = foldS (\a i -> a) (NN (\f -> 1 )) clk

ll = not True || False

ppp = 1.0


